<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Narumikazuchi</name>
    </assembly>
    <members>
        <member name="T:Narumikazuchi.AlphanumericVersion">
            <summary>
            Represents an immutable alphanumeric version number.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.op_Implicit(System.Version)~Narumikazuchi.AlphanumericVersion">
            <summary>
            Implicit conversion from <see cref="T:System.Version"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.#ctor(Narumikazuchi.NotNullOrEmpty{System.String},Narumikazuchi.MaybeNullOrEmpty{System.String},Narumikazuchi.MaybeNullOrEmpty{System.String},Narumikazuchi.MaybeNullOrEmpty{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.AlphanumericVersion"/> struct.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.ToString">
            <summary>
            Transforms the <see cref="T:Narumikazuchi.AlphanumericVersion"/> into a <see cref="T:System.String"/> according to the default format '#.#.#.#'.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.ToString(Narumikazuchi.MaybeNullOrEmpty{System.String})">
            <summary>
            Formats the output to be in a user specified format.
            </summary>
            <param name="format">The format in which to display the version. See the 'remarks'-section for more information.</param>
            <remarks>
            Remarks: When defining the format of the output use the following rules:
            <list type="bullet">
                <item>
                    Use '#' as placeholder for any of the segments. The method will replace the first '#' with the major version,
                    the second with the minor version, the third with the build version and the fourth with the revision.
                    Every instance of that symbol afterwards will be ignored.
                </item>
                <item>
                    Every other character that is present in front, in between or after the '#' characters will be used as separators
                    in the resulting output.
                </item>
            </list>
            Example: A format of '#.#-#-#' will result in the output 'MAJOR.MINOR-BUILD-REVISION', while a format of 'a#bc#bc#d#e'
            will result in the output 'aMAJORbcMINORbcBUILDdREVISIONe', replacing each of the version segments with their respective values.
            </remarks>
            <returns>This instance formatted as a <see cref="T:System.String"/></returns>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Major">
            <summary>
            Gets the major version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Minor">
            <summary>
            Gets the minor version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>. Returns -1 if no minor version component is specified.
            </summary>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Build">
            <summary>
            Gets the build version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>. Returns -1 if no build version component is specified.
            </summary>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Revision">
            <summary>
            Gets the revision version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>. Returns -1 if no revision  version component is specified.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Clone">
            <summary>
            Creates a new object that is an exact copy of this instance.
            </summary>
            <returns>A new object that is an exact copy of this instance.</returns>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.CompareTo(Narumikazuchi.AlphanumericVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Equals(Narumikazuchi.AlphanumericVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Parse(Narumikazuchi.NotNullOrEmpty{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.TryParse(Narumikazuchi.MaybeNullOrEmpty{System.String},Narumikazuchi.AlphanumericVersion@)">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.AttributeResolver">
            <summary>
            Checks if a custom attribute is defined or fetches the custom attributes applied to a type, method, parameter etc.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.HasAttribute``1(Narumikazuchi.NotNull{System.Reflection.Assembly})">
            <summary>
            Checks if the specified <see cref="T:System.Reflection.Assembly"/> has at least one <typeparamref name="TAttribute"/> defined.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.HasAttribute``1(Narumikazuchi.NotNull{System.Reflection.MemberInfo})">
            <summary>
            Checks if the specified <see cref="T:System.Reflection.MemberInfo"/> has at least one <typeparamref name="TAttribute"/> defined.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.HasAttribute``1(Narumikazuchi.NotNull{System.Reflection.ParameterInfo})">
            <summary>
            Checks if the specified <see cref="T:System.Reflection.ParameterInfo"/> has at least one <typeparamref name="TAttribute"/> defined.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.ParameterInfo"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchAllAttributes``1(Narumikazuchi.NotNull{System.Reflection.Assembly})">
            <summary>
            Fetches all attributes of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve the attributes from.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchAllAttributes``1(Narumikazuchi.NotNull{System.Reflection.MemberInfo})">
            <summary>
            Fetches all attributes of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to retrieve the attributes from.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchAllAttributes``1(Narumikazuchi.NotNull{System.Reflection.ParameterInfo})">
            <summary>
            Fetches all attributes of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.ParameterInfo"/> to retrieve the attributes from.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchSingleAttribute``1(Narumikazuchi.NotNull{System.Reflection.Assembly})">
            <summary>
            Fetches the only allowed attribute of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve the attribute from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchSingleAttribute``1(Narumikazuchi.NotNull{System.Reflection.MemberInfo})">
            <summary>
            Fetches the only allowed attribute of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to retrieve the attribute from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchSingleAttribute``1(Narumikazuchi.NotNull{System.Reflection.ParameterInfo})">
            <summary>
            Fetches the only allowed attribute of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.ParameterInfo"/> to retrieve the attribute from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:Narumikazuchi.Collections.EnumEnumerator`1">
            <summary>
            Represents an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:System.Collections.Generic.IEnumerator`1"/> of type
            <typeparamref name="TEnum"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.EnumEnumerator`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.Collections.EnumEnumerator`1.GetEnumerator">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerator`1"/> for this <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>Itself, if the enumeration has not yet started; else a clone of itself.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.EnumEnumerator`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.EnumEnumerator`1.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Collections.IStrongEnumerable`2">
            <summary>
            Allows for the implementing object to optimize the generated IL code by
            providing a specific type instead of an interface for the <see cref="M:Narumikazuchi.Collections.IStrongEnumerable`2.GetEnumerator"/>
            method. Using this interface will reduce the delegation cost of virtual IL calls
            and therefore improve iteration times of <see langword="foreach"/>-loops.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.IStrongEnumerable`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Narumikazuchi.Collections.IStrongEnumerator`1">
            <summary>
            Allows for the implementing object to optimize the generated IL code by
            providing a specific type instead of an interface for the 
            <see cref="M:Narumikazuchi.Collections.IStrongEnumerable`2.GetEnumerator"/> method. 
            Using this interface will reduce the delegation cost of virtual IL calls
            and therefore improve iteration times of <see langword="foreach"/>-loops.
            This interface also removes the requirement of the implementation of the
            <see cref="M:System.IDisposable.Dispose"/> method, making the resulting type 
            even more memory efficient.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Collections.PrimeEnumerator">
            <summary>
            Enumerates through a list of prime numbers
            </summary>
        </member>
        <member name="M:Narumikazuchi.Collections.PrimeEnumerator.GetEnumerator">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerator`1"/> for this <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>Itself, if the enumeration has not yet started; else a clone of itself.</returns>
        </member>
        <member name="M:Narumikazuchi.Collections.PrimeEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Collections.PrimeEnumerator.Current">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.EventHandler`1">
            <summary>
            Represents the method that will handle an event without event data.
            </summary>
            <param name="sender">The object which raised the event.</param>
        </member>
        <member name="T:Narumikazuchi.EventHandler`2">
            <summary>
            Represents the method that will handle an event with certain event data.
            </summary>
            <param name="sender">The object which raised the event.</param>
            <param name="eventArgs">The event data for the raised event.</param>
        </member>
        <member name="T:Narumikazuchi.EqualityComparison`1">
            <summary>
            Represents the method to compare two instances of the same type for equality.
            </summary>
        </member>
        <member name="T:Narumikazuchi.ImpossibleState">
            <summary>
            Exception thrown when an impossible state is reached inside an object.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ImpossibleState.#ctor(Narumikazuchi.MaybeNull{System.String},Narumikazuchi.MaybeNull{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ImpossibleState.#ctor(Narumikazuchi.MaybeNull{System.String},Narumikazuchi.MaybeNull{System.Exception},System.Collections.Generic.KeyValuePair{System.Object,Narumikazuchi.MaybeNull{System.Object}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ImpossibleState.#ctor(Narumikazuchi.MaybeNull{System.String},Narumikazuchi.MaybeNull{System.Exception},System.Tuple{System.Object,Narumikazuchi.MaybeNull{System.Object}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="T:Narumikazuchi.NotAllowed">
            <summary>
            Exception thrown when an unallowed action is about to be performed.
            </summary>
        </member>
        <member name="M:Narumikazuchi.NotAllowed.#ctor(Narumikazuchi.MaybeNull{System.String},Narumikazuchi.MaybeNull{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.NotAllowed.#ctor(Narumikazuchi.MaybeNull{System.String},Narumikazuchi.MaybeNull{System.Exception},System.Collections.Generic.KeyValuePair{System.Object,Narumikazuchi.MaybeNull{System.Object}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.NotAllowed"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.NotAllowed.#ctor(Narumikazuchi.MaybeNull{System.String},Narumikazuchi.MaybeNull{System.Exception},System.Tuple{System.Object,Narumikazuchi.MaybeNull{System.Object}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.NotAllowed"/> class.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Converter`1">
            <summary>
            Converts types that implement the <see cref="T:Narumikazuchi.IConvertible`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Converter`1.ToType``1(Narumikazuchi.NotNull{``0})">
            <summary>
            Converts the specified <typeparamref name="TConvertible"/> into the <typeparamref name="TResult"/> type. 
            </summary>
            <param name="convertible">The instance to convert.</param>
            <returns>A new instance of <typeparamref name="TResult"/> with the 
            same value as the specified <typeparamref name="TConvertible"/></returns>
        </member>
        <member name="M:Narumikazuchi.Converter`1.ToType``2(Narumikazuchi.NotNull{``0},Narumikazuchi.MaybeNull{``1})">
            <summary>
            Converts the specified <typeparamref name="TConvertible"/> into the <typeparamref name="TResult"/> type 
            using the specified culture-specific formatting. 
            </summary>
            <param name="convertible">The instance to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> implementation which provides culture-specific formatting.</param>
            <returns>A new instance of <typeparamref name="TResult"/> with the 
            same value as the specified <typeparamref name="TConvertible"/></returns>
        </member>
        <member name="T:Narumikazuchi.IConvertible`1">
            <summary>
            Defines a method to convert the implementing type to the type <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.IConvertible`1.ToType``1(Narumikazuchi.MaybeNull{``0})">
            <summary>
            Converts this instance into a new instance of <typeparamref name="TType"/> with the same value using the specified culture-specific formatting.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> implementation which provides culture-specific formatting.</param>
            <returns>A new instance of <typeparamref name="TType"/> with the same value as this instance</returns>
        </member>
        <member name="T:Narumikazuchi.INotifyPropertyChangedHelper">
            <summary>
            Implements a way for extensions methods to raise the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:Narumikazuchi.INotifyPropertyChangedHelper.OnPropertyChanged(Narumikazuchi.NotNull{System.String})">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for the specified property.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="T:Narumikazuchi.INotifyPropertyChangingHelper">
            <summary>
            Implements a way for extensions methods to raise the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event.
            </summary>
        </member>
        <member name="M:Narumikazuchi.INotifyPropertyChangingHelper.OnPropertyChanging(Narumikazuchi.NotNull{System.String})">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event for the specified property.
            </summary>
            <param name="propertyName">The name of the property that is changing.</param>
        </member>
        <member name="M:Narumikazuchi.MaybeNullOrEmpty`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNullOrEmpty`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNullOrEmpty`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNullOrEmpty`1.TryGetValue(`0@)">
            <summary>
            Gets the value wrapped in the <see cref="T:Narumikazuchi.MaybeNullOrEmpty`1"/>.
            </summary>
            <param name="value">The value wrapped in the <see cref="T:Narumikazuchi.MaybeNullOrEmpty`1"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Narumikazuchi.MaybeNullOrEmpty`1"/> wraps a valid value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.MaybeNullOrEmpty`1.Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNullOrEmpty`1.Equals(Narumikazuchi.MaybeNullOrEmpty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNull`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNull`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNull`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNull`1.TryGetValue(`0@)">
            <summary>
            Gets the value wrapped in the <see cref="T:Narumikazuchi.MaybeNull`1"/>.
            </summary>
            <param name="value">The value wrapped in the <see cref="T:Narumikazuchi.MaybeNull`1"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Narumikazuchi.MaybeNull`1"/> wraps a valid value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.MaybeNull`1.Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.MaybeNull`1.Equals(Narumikazuchi.MaybeNull{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNullOrEmpty`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNullOrEmpty`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNullOrEmpty`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNullOrEmpty`1.Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNullOrEmpty`1.Equals(Narumikazuchi.NotNullOrEmpty{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNull`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNull`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNull`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNull`1.Equals(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.NotNull`1.Equals(Narumikazuchi.NotNull{`0})">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.ParameterExtensions">
            <summary>
            Contains helpers for the parameter clarifiers (<see cref="T:Narumikazuchi.MaybeNull`1"/>, <see cref="T:Narumikazuchi.MaybeNullOrEmpty`1"/>, <see cref="T:Narumikazuchi.NotNull`1"/>, <see cref="T:Narumikazuchi.NotNullOrEmpty`1"/>).
            </summary>
        </member>
        <member name="M:Narumikazuchi.ParameterExtensions.GetAwaiter(Narumikazuchi.MaybeNull{System.Threading.Tasks.Task})">
            <summary>
            Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="M:Narumikazuchi.ParameterExtensions.GetAwaiter(Narumikazuchi.NotNull{System.Threading.Tasks.Task})">
            <summary>
            Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="M:Narumikazuchi.ParameterExtensions.GetAwaiter``1(Narumikazuchi.MaybeNull{System.Threading.Tasks.Task{``0}})">
            <summary>
            Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="M:Narumikazuchi.ParameterExtensions.GetAwaiter``1(Narumikazuchi.NotNull{System.Threading.Tasks.Task{``0}})">
            <summary>
            Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <returns>An awaiter instance.</returns>
        </member>
        <member name="T:Narumikazuchi.Primes">
            <summary>
            Provides methods to generate primes or check for them.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Primes.IsPrime(System.Int64)">
            <summary>
            Checks whether the specified candidate is a prime number.
            </summary>
            <param name="candidate">The candidate to check.</param>
            <returns><see langword="true"/> if the specified candidate is a prime; otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Primes.GetPrevious(System.Int64)">
            <summary>
            Returns the nearest prime that is smaller than or equal to the specified parameter.
            </summary>
            <param name="origin">The origin from where to start.</param>
            <returns>The nearest prime that is smaller than or equal to the specified parameter</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Narumikazuchi.Primes.GetNext(System.Int64)">
            <summary>
            Returns the nearest prime that is greater than or equal to the specified parameter.
            </summary>
            <param name="origin">The origin from where to start.</param>
            <returns>The nearest prime that is greater than or equal to the specified parameter</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Narumikazuchi.Primes.ListUntil(System.Int64,System.Int64)">
            <summary>
            Enumerates all primes in the range specified by the specified starting point to the specified end point.
            </summary>
            <returns>The list of primes contained in the specified range</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:Narumikazuchi.SystemExtensions">
            <summary>
            Contains extensions for the System namespace.
            </summary>
        </member>
        <member name="M:Narumikazuchi.SystemExtensions.Clamp``1(``0,Narumikazuchi.NotNull{``0},Narumikazuchi.NotNull{``0})">
            <summary>
            Returns the comparable clamped between the specified min and max value.
            </summary>
            <param name="value"></param>
            <param name="lowBound">Low-bound for the clamping</param>
            <param name="highBound">High-bound for the clamping</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.SystemExtensions.EnumerateFlags``1(``0)">
            <summary>
            Enumerates the flags, which are set in this value.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all flags that are set in this value.</returns>
        </member>
        <member name="M:Narumikazuchi.SystemExtensions.SanitizeForFilename(System.String)">
            <summary>
            Sanitizes this <see cref="T:System.String"/> to be able to use as valid filename.
            </summary>
            <returns>Another <see cref="T:System.String"/> which represents a valid filename.</returns>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Narumikazuchi</name>
    </assembly>
    <members>
        <member name="T:Narumikazuchi.AlphanumericVersion">
            <summary>
            Represents an immutable alphanumeric version number.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.op_Implicit(System.Version)~Narumikazuchi.AlphanumericVersion">
            <summary>
            Implicit conversion from <see cref="T:System.Version"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.#ctor(Narumikazuchi.Generated.StringOrUnsignedInt,Narumikazuchi.Generated.StringOrUnsignedInt,Narumikazuchi.Generated.StringOrUnsignedInt,Narumikazuchi.Generated.StringOrUnsignedInt)">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.AlphanumericVersion"/> struct.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.ToString">
            <summary>
            Transforms the <see cref="T:Narumikazuchi.AlphanumericVersion"/> into a <see cref="T:System.String"/> according to the default format '#.#.#.#'.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.ToString(System.String)">
            <summary>
            Formats the output to be in a user specified format.
            </summary>
            <param name="format">The format in which to display the version. See the 'remarks'-section for more information.</param>
            <remarks>
            Remarks: When defining the format of the output use the following rules:
            <list type="bullet">
                <item>
                    Use '#' as placeholder for any of the segments. The method will replace the first '#' with the major version,
                    the second with the minor version, the third with the build version and the fourth with the revision.
                    Every instance of that symbol afterwards will be ignored.
                </item>
                <item>
                    Every other character that is present in front, in between or after the '#' characters will be used as separators
                    in the resulting output.
                </item>
            </list>
            Example: A format of '#.#-#-#' will result in the output 'MAJOR.MINOR-BUILD-REVISION', while a format of 'a#bc#bc#d#e'
            will result in the output 'aMAJORbcMINORbcBUILDdREVISIONe', replacing each of the version segments with their respective values.
            </remarks>
            <returns>This instance formatted as a <see cref="T:System.String"/></returns>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Major">
            <summary>
            Gets the major version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Minor">
            <summary>
            Gets the minor version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>. Returns -1 if no minor version component is specified.
            </summary>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Build">
            <summary>
            Gets the build version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>. Returns -1 if no build version component is specified.
            </summary>
        </member>
        <member name="P:Narumikazuchi.AlphanumericVersion.Revision">
            <summary>
            Gets the revision version component of this <see cref="T:Narumikazuchi.AlphanumericVersion"/>. Returns -1 if no revision  version component is specified.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Clone">
            <summary>
            Creates a new object that is an exact copy of this instance.
            </summary>
            <returns>A new object that is an exact copy of this instance.</returns>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.CompareTo(Narumikazuchi.AlphanumericVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.op_Equality(Narumikazuchi.AlphanumericVersion,Narumikazuchi.AlphanumericVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.op_Inequality(Narumikazuchi.AlphanumericVersion,Narumikazuchi.AlphanumericVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Equals(Narumikazuchi.AlphanumericVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Parse(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.TryParse(System.String,System.IFormatProvider,Narumikazuchi.AlphanumericVersion@)">
            <inheritdoc/>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.Parse(System.String)">
            <summary>
            Parses the specified string into a new <see cref="T:Narumikazuchi.AlphanumericVersion"/> object.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.TryParse(System.String,Narumikazuchi.AlphanumericVersion@)">
            <summary>
            Tries to parse the specified string into a new <see cref="T:Narumikazuchi.AlphanumericVersion"/> object.
            </summary>
            <returns><see langword="true"/> if the parsing succeeded; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.AlphanumericVersion.VersionRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Za-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Narumikazuchi.AttributeResolver">
            <summary>
            Checks if a custom attribute is defined or fetches the custom attributes applied to a type, method, parameter etc.
            </summary>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.HasAttribute``1(System.Reflection.Assembly)">
            <summary>
            Checks if the specified <see cref="T:System.Reflection.Assembly"/> has at least one <typeparamref name="TAttribute"/> defined.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Checks if the specified <see cref="T:System.Reflection.MemberInfo"/> has at least one <typeparamref name="TAttribute"/> defined.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.HasAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Checks if the specified <see cref="T:System.Reflection.ParameterInfo"/> has at least one <typeparamref name="TAttribute"/> defined.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.ParameterInfo"/> to check.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchAllAttributes``1(System.Reflection.Assembly)">
            <summary>
            Fetches all attributes of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve the attributes from.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchAllAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Fetches all attributes of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to retrieve the attributes from.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchAllAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Fetches all attributes of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.ParameterInfo"/> to retrieve the attributes from.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchSingleAttribute``1(System.Reflection.Assembly)">
            <summary>
            Fetches the only allowed attribute of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to retrieve the attribute from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchSingleAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Fetches the only allowed attribute of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to retrieve the attribute from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Narumikazuchi.AttributeResolver.FetchSingleAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Fetches the only allowed attribute of type <typeparamref name="TAttribute"/> from the specified <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="info">The <see cref="T:System.Reflection.ParameterInfo"/> to retrieve the attribute from.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:Narumikazuchi.EventHandler`1">
            <summary>
            Represents the method that will handle an event without event data.
            </summary>
            <param name="sender">The object which raised the event.</param>
        </member>
        <member name="T:Narumikazuchi.EventHandler`2">
            <summary>
            Represents the method that will handle an event with certain event data.
            </summary>
            <param name="sender">The object which raised the event.</param>
            <param name="eventArgs">The event data for the raised event.</param>
        </member>
        <member name="T:Narumikazuchi.EqualityComparison`1">
            <summary>
            Represents the method to compare two instances of the same type for equality.
            </summary>
        </member>
        <member name="T:Narumikazuchi.ExceptionHelpers">
            <summary>
            Contains helpers for throwing exceptions.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ExceptionHelpers.ThrowIfNullOrEmpty(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Throws an <see cref="T:System.NullReferenceException"/> if the source parameter is null.
            </summary>
            <param name="source">The source to check against <see langword="null"/>.</param>
            <param name="message">An optional message for the <see cref="T:System.Exception"/> that will be thrown.</param>
            <param name="asArgumentException">Whether the method should throw an <see cref="T:System.ArgumentNullException"/> or a <see cref="T:System.NullReferenceException"/>.</param>
            <param name="varName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.NullReferenceException" />
            <remarks>
            The custom message will be formatted using <see cref="M:System.String.Format(System.String,System.Object)"/>. If you provide a custom message, the '{0}' placeholder 
            will be filled with the name of the variable by this method.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.ExceptionHelpers.ThrowIfLesserThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the source parameter is less than the specified bounds.
            </summary>
            <param name="source">The source to check against the <paramref name="boundary"/>.</param>
            <param name="boundary">The low bound to check against.</param>
            <param name="message">An optional message for the <see cref="T:System.Exception"/> that will be thrown.</param>
            <param name="paramName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.ExceptionHelpers.ThrowIfBiggerThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the source parameter is bigger than the specified bounds.
            </summary>
            <param name="source">The source to check against the <paramref name="boundary"/>.</param>
            <param name="boundary">The high bound to check against.</param>
            <param name="message">An optional message for the <see cref="T:System.Exception"/> that will be thrown.</param>
            <param name="paramName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.ExceptionHelpers.ThrowIfOutOfRange``1(``0,``0,``0,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the source parameter is outside of the specified bounds.
            </summary>
            <param name="source">The source to check against the <paramref name="lowerBoundary"/> and <paramref name="higherBoundary"/>.</param>
            <param name="lowerBoundary">The low bound to check against.</param>
            <param name="higherBoundary">The high bound to check against.</param>
            <param name="message">An optional message for the <see cref="T:System.Exception"/> that will be thrown.</param>
            <param name="paramName">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Narumikazuchi.ExceptionHelpers.ExtractInformation(System.Exception)">
            <summary>
            Extracts precise Inforamtion from the specified <see cref="T:System.Exception"/>.
            </summary>
            <param name="source">The exception to extract data from.</param>
            <returns>An information object, containing detailed data on the exception</returns>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="T:Narumikazuchi.ExceptionInformation">
            <summary>
            Contains detailed information of an <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.ExceptionInformation.Data">
            <summary>
            Gets the environment data from when the <see cref="T:System.Exception"/> has been thrown.
            </summary>
        </member>
        <member name="P:Narumikazuchi.ExceptionInformation.InnerException">
            <summary>
            Gets the inner <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.ExceptionInformation.CallStack">
            <summary>
            Gets the callstack from when the <see cref="T:System.Exception"/> occured.
            </summary>
        </member>
        <member name="P:Narumikazuchi.ExceptionInformation.SourceType">
            <summary>
            Gets the type in which the <see cref="T:System.Exception"/> occured.
            </summary>
        </member>
        <member name="P:Narumikazuchi.ExceptionInformation.SourceLibrary">
            <summary>
            Gets the library where the <see cref="P:Narumikazuchi.ExceptionInformation.SourceType"/> is declared.
            </summary>
        </member>
        <member name="P:Narumikazuchi.ExceptionInformation.SourceMember">
            <summary>
            Gets the member who caused the <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.ExceptionInformation.SourceMemberType">
            <summary>
            Gets the member type of the <see cref="P:Narumikazuchi.ExceptionInformation.SourceMember"/>.
            </summary>
        </member>
        <member name="T:Narumikazuchi.FailedInitialization">
            <summary>
            Exception thrown when an operation is attempted on an uninitialized struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.FailedInitialization.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.FailedInitialization"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.FailedInitialization.#ctor(System.String,System.Exception,System.ValueTuple{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.FailedInitialization"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.FailedInitialization.#ctor(System.String,System.Exception,System.Collections.Generic.KeyValuePair{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.FailedInitialization"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.FailedInitialization.#ctor(System.String,System.Exception,System.Tuple{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.FailedInitialization"/> class.
            </summary>
        </member>
        <member name="T:Narumikazuchi.FunctionCallInformation">
            <summary>
            Contains the information for a function call on the call stack.
            </summary>
        </member>
        <member name="M:Narumikazuchi.FunctionCallInformation.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.FunctionCallInformation.File">
            <summary>
            Gets the path to the file, where the function is defined.
            </summary>
        </member>
        <member name="P:Narumikazuchi.FunctionCallInformation.Target">
            <summary>
            Gets the name of the declaring type.
            </summary>
        </member>
        <member name="P:Narumikazuchi.FunctionCallInformation.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:Narumikazuchi.FunctionCallInformation.Line">
            <summary>
            Gets the line number in the file.
            </summary>
        </member>
        <member name="P:Narumikazuchi.FunctionCallInformation.Column">
            <summary>
            Gets the column in the line of the file.
            </summary>
        </member>
        <member name="T:Narumikazuchi.ImpossibleState">
            <summary>
            Exception thrown when an impossible state is reached inside an object.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ImpossibleState.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ImpossibleState.#ctor(System.String,System.Exception,System.ValueTuple{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ImpossibleState.#ctor(System.String,System.Exception,System.Collections.Generic.KeyValuePair{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.ImpossibleState.#ctor(System.String,System.Exception,System.Tuple{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.ImpossibleState"/> class.
            </summary>
        </member>
        <member name="T:Narumikazuchi.NotAllowed">
            <summary>
            Exception thrown when an unallowed action is about to be performed.
            </summary>
        </member>
        <member name="M:Narumikazuchi.NotAllowed.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.NotAllowed"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.NotAllowed.#ctor(System.String,System.Exception,System.ValueTuple{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.NotAllowed"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.NotAllowed.#ctor(System.String,System.Exception,System.Collections.Generic.KeyValuePair{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.NotAllowed"/> class.
            </summary>
        </member>
        <member name="M:Narumikazuchi.NotAllowed.#ctor(System.String,System.Exception,System.Tuple{System.Object,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.NotAllowed"/> class.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Converter`1">
            <summary>
            Converts types that implement the <see cref="T:Narumikazuchi.IConvertible`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Converter`1.ToType``1(``0)">
            <summary>
            Converts the specified <typeparamref name="TConvertible"/> into the <typeparamref name="TResult"/> type. 
            </summary>
            <param name="convertible">The instance to convert.</param>
            <returns>A new instance of <typeparamref name="TResult"/> with the 
            same value as the specified <typeparamref name="TConvertible"/></returns>
        </member>
        <member name="M:Narumikazuchi.Converter`1.ToType``2(``0,``1)">
            <summary>
            Converts the specified <typeparamref name="TConvertible"/> into the <typeparamref name="TResult"/> type 
            using the specified culture-specific formatting. 
            </summary>
            <param name="convertible">The instance to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> implementation which provides culture-specific formatting.</param>
            <returns>A new instance of <typeparamref name="TResult"/> with the 
            same value as the specified <typeparamref name="TConvertible"/></returns>
        </member>
        <member name="T:Narumikazuchi.IConvertible`1">
            <summary>
            Defines a method to convert the implementing type to the type <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.IConvertible`1.ToType``1(``0)">
            <summary>
            Converts this instance into a new instance of <typeparamref name="TType"/> with the same value using the specified culture-specific formatting.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> implementation which provides culture-specific formatting.</param>
            <returns>A new instance of <typeparamref name="TType"/> with the same value as this instance</returns>
        </member>
        <member name="T:Narumikazuchi.INotifyPropertyChangedHelper">
            <summary>
            Implements a way for extensions methods to raise the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:Narumikazuchi.INotifyPropertyChangedHelper.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for the specified property.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="T:Narumikazuchi.INotifyPropertyChangingHelper">
            <summary>
            Implements a way for extensions methods to raise the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event.
            </summary>
        </member>
        <member name="M:Narumikazuchi.INotifyPropertyChangingHelper.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/> event for the specified property.
            </summary>
            <param name="propertyName">The name of the property that is changing.</param>
        </member>
        <member name="T:Narumikazuchi.Pointer`1">
            <summary>
            Represents a reference to a struct or a reference to a reference for a class. Can be used in a safe context unlike regular pointers.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Pointer`1.AddressOf(`0@)">
            <summary>
            Creates a pointer from the address of the reference to the specified <typeparamref name="T"/>.
            </summary>
            <param name="t">The object to create a <see cref="T:Narumikazuchi.Pointer`1"/> of.</param>
            <returns>A <see cref="T:Narumikazuchi.Pointer`1"/> to the reference of <typeparamref name="T"/></returns>
        </member>
        <member name="M:Narumikazuchi.Pointer`1.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Pointer`1"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Pointer`1.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Pointer`1"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Pointer`1.#ctor(System.UIntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Narumikazuchi.Pointer`1"/> struct.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Pointer`1.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Pointer`1.Item(System.Int32)">
            <summary>
            Gets or sets the value of where the pointer at the specified index points at.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Pointer`1.Address">
            <summary>
            Gets the current address of this pointer.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Pointer`1.Value">
            <summary>
            Gets or sets the value of where the pointer currently points at.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="T:Narumikazuchi.SystemExtensions">
            <summary>
            Contains extensions for the System namespace.
            </summary>
        </member>
        <member name="M:Narumikazuchi.SystemExtensions.Clamp``1(``0,``0,``0)">
            <summary>
            Returns the comparable clamped between the specified min and max value.
            </summary>
            <param name="value"></param>
            <param name="lowerBoundary">Low-bound for the clamping</param>
            <param name="higherBoundary">High-bound for the clamping</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Narumikazuchi.SystemExtensions.SanitizeForFilename(System.String)">
            <summary>
            Sanitizes this <see cref="T:System.String"/> to be able to use as valid filename.
            </summary>
            <remarks>
            Do not confuse a filename for a filepath, since this method will also remove
            valid path characters like ':' or '/', which are commonly used in paths.
            </remarks>
            <returns>Another <see cref="T:System.String"/> which represents a valid filename.</returns>
        </member>
        <member name="T:Narumikazuchi.Generated.StringOrUnsignedInt">
            <summary>
            A type that can be assigned either of these types: <code><see cref="T:System.String"/> | <see cref="T:System.Byte"/> | <see cref="T:System.UInt16"/> | <see cref="T:System.UInt32"/> | <see cref="T:System.UInt64"/></code>
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the VersionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.VersionRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
